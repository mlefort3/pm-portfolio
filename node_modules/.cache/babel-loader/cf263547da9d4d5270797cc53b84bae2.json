{"ast":null,"code":"/* eslint-disable no-unused-vars */\nvar lib = require('./lib');\n\nvar error = require('./constants').error;\n\nvar getValidationMessage = require('./validationMessages');\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\n\n\nfunction _validateLength(num) {\n  const len = Number(num);\n\n  if (isNaN(len) || !Number.isInteger(len) || len < 1) {\n    throw new Error(error.length);\n  }\n}\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @returns {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\n\n\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} method - Property name\n * @param {array} arguments - arguments for the func property\n * @returns {PasswordValidator}\n */\n\n\nfunction _register(method, args, description) {\n  // Add property to the schema\n  this.properties.push({\n    method,\n    arguments: args,\n    description\n  });\n  return this;\n}\n\nclass PasswordValidator {\n  /**\n   * Creates a password-validator schema\n   *\n   * @constructor\n   */\n  constructor() {\n    this.properties = [];\n  }\n  /**\n   * Method to validate the password against schema\n   *\n   * @param {string} pwd - password to validate\n   * @param {object} [options] - optional options to configure validation\n   * @param {boolean} [options.list] - asks for a list of validation\n   *           failures instead of just true/false\n   * @param {boolean} [options.details] - asks for more details about\n   *           failed validations including arguments, and error messages\n   * @returns {boolean|array} Boolean value indicting the validity\n   *           of the password as per schema, if 'options.list' or\n   *           'options.details' is not set. Otherwise, it returns an\n   *           array of property names which failed validations\n   */\n\n\n  validate(pwd, options) {\n    this.list = Boolean(options && options.list);\n    this.details = Boolean(options && options.details);\n    this.password = String(pwd);\n    this.positive = true;\n\n    if (this.list || this.details) {\n      return this.properties.reduce((errorList, property) => {\n        // Applies all validations defined in lib one by one\n        if (!_isPasswordValidFor.call(this, property)) {\n          // If the validation for a property fails,\n          // add it to the error list\n          var detail = property.method; // If the details option was provided,\n          // return a rich object including validation message\n\n          if (this.details) {\n            detail = {\n              validation: property.method\n            };\n\n            if (property.arguments && property.arguments[0]) {\n              detail.arguments = property.arguments[0];\n            }\n\n            if (!this.positive && property.method !== 'not') {\n              detail.inverted = true;\n            }\n\n            var description = property.arguments && property.arguments[1];\n            var validationMessage = description || getValidationMessage(property.method, detail.arguments, detail.inverted);\n            detail.message = validationMessage;\n          }\n\n          return errorList.concat(detail);\n        }\n\n        return errorList;\n      }, []);\n    }\n\n    return this.properties.every(_isPasswordValidFor.bind(this));\n  }\n  /**\n   * Rule to mandate the presence of letters in the password\n   *\n   * @param {number} [count] - minimum number of letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n\n\n  letters(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'letters', arguments);\n  }\n  /**\n   * Rule to mandate the presence of digits in the password\n   *\n   * @param {number} [count] - minimum number of digits required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n\n\n  digits(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'digits', arguments);\n  }\n  /**\n   * Rule to mandate the presence of symbols in the password\n   *\n   * @param {number} [count] - minimum number of symbols required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n\n\n  symbols(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'symbols', arguments);\n  }\n  /**\n   * Rule to specify a minimum length of the password\n   *\n   * @param {number} num - minimum length\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n\n\n  min(num, description) {\n    _validateLength(num);\n\n    return _register.call(this, 'min', arguments);\n  }\n  /**\n   * Rule to specify a maximum length of the password\n   *\n   * @param {number} num - maximum length\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n\n\n  max(num, description) {\n    _validateLength(num);\n\n    return _register.call(this, 'max', arguments);\n  }\n  /**\n   * Rule to mandate the presence of lowercase letters in the password\n   *\n   * @param {number} [count] - minimum number of lowercase letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n\n\n  lowercase(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'lowercase', arguments);\n  }\n  /**\n   * Rule to mandate the presence of uppercase letters in the password\n   *\n   * @param {number} [count] - minimum number of uppercase letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n\n\n  uppercase(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'uppercase', arguments);\n  }\n  /**\n   * Rule to mandate the presence of space in the password\n   * It can be used along with 'not' to not allow spaces\n   * in the password\n   *\n   * @param {number} [count] - minimum number of spaces required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n\n\n  spaces(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'spaces', arguments);\n  }\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'has' is also used\n   * to make the api readable and chainable\n   *\n   * @param {string|RegExp} [pattern] - pattern to match\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n\n\n  has(pattern, description) {\n    return _register.call(this, 'has', arguments);\n  }\n  /**\n   * Rule to invert the next applied rules.\n   * All the rules applied after 'not' will have opposite effect,\n   * until 'has' rule is applied\n   *\n   * @param {string|RegExp} [pattern] - pattern to not match\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n\n\n  not(pattern, description) {\n    return _register.call(this, 'not', arguments);\n  }\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'is' is also used\n   * to make the api readable and chainable\n   *\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n\n\n  is() {\n    return _register.call(this, 'is', arguments);\n  }\n  /**\n   * Rule to whitelist words to be used as password\n   *\n   * @param {array} list - list of values allowed\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n\n\n  oneOf(list, description) {\n    return _register.call(this, 'oneOf', arguments);\n  }\n  /**\n   * Insert a plugin function into the validation chain\n   *\n   * @param {Plugin} fn  - A plugin function\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n\n\n  usingPlugin(fn, description) {\n    if (typeof fn !== 'function') {\n      throw new Error(error.invalidPlugin);\n    }\n\n    return _register.call(this, 'usingPlugin', arguments);\n  }\n\n}\n\nmodule.exports = PasswordValidator;\n/**\n * @callback Plugin\n * @param password Password injected by the library\n */","map":{"version":3,"names":["lib","require","error","getValidationMessage","_validateLength","num","len","Number","isNaN","isInteger","Error","length","_isPasswordValidFor","property","method","apply","arguments","_register","args","description","properties","push","PasswordValidator","constructor","validate","pwd","options","list","Boolean","details","password","String","positive","reduce","errorList","call","detail","validation","inverted","validationMessage","message","concat","every","bind","letters","count","digits","symbols","min","max","lowercase","uppercase","spaces","has","pattern","not","is","oneOf","usingPlugin","fn","invalidPlugin","module","exports"],"sources":["/Users/maxencelefort/Documents/GitHub/pm-portfolio/node_modules/password-validator/src/index.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nvar lib = require('./lib');\nvar error = require('./constants').error;\nvar getValidationMessage = require('./validationMessages');\n\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\nfunction _validateLength(num) {\n  const len = Number(num);\n  if (isNaN(len) || !Number.isInteger(len) || len < 1) {\n    throw new Error(error.length);\n  }\n}\n\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @returns {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} method - Property name\n * @param {array} arguments - arguments for the func property\n * @returns {PasswordValidator}\n */\nfunction _register(method, args, description) {\n  // Add property to the schema\n  this.properties.push({ method, arguments: args, description });\n  return this;\n}\n\nclass PasswordValidator {\n  /**\n   * Creates a password-validator schema\n   *\n   * @constructor\n   */\n  constructor() {\n    this.properties = [];\n  }\n\n  /**\n   * Method to validate the password against schema\n   *\n   * @param {string} pwd - password to validate\n   * @param {object} [options] - optional options to configure validation\n   * @param {boolean} [options.list] - asks for a list of validation\n   *           failures instead of just true/false\n   * @param {boolean} [options.details] - asks for more details about\n   *           failed validations including arguments, and error messages\n   * @returns {boolean|array} Boolean value indicting the validity\n   *           of the password as per schema, if 'options.list' or\n   *           'options.details' is not set. Otherwise, it returns an\n   *           array of property names which failed validations\n   */\n  validate(pwd, options) {\n    this.list = Boolean(options && options.list);\n    this.details = Boolean(options && options.details);\n    this.password = String(pwd);\n\n    this.positive = true;\n\n    if (this.list || this.details) {\n      return this.properties.reduce((errorList, property) => {\n        // Applies all validations defined in lib one by one\n        if (!_isPasswordValidFor.call(this, property)) {\n          // If the validation for a property fails,\n          // add it to the error list\n          var detail = property.method;\n          // If the details option was provided,\n          // return a rich object including validation message\n          if (this.details) {\n            detail = { validation: property.method };\n            if (property.arguments && property.arguments[0]) {\n              detail.arguments = property.arguments[0];\n            }\n\n            if (!this.positive && property.method !== 'not') {\n              detail.inverted = true;\n            }\n            var description = property.arguments && property.arguments[1];\n            var validationMessage = description || getValidationMessage(property.method, detail.arguments, detail.inverted);\n            detail.message = validationMessage;\n          }\n\n          return errorList.concat(detail);\n        }\n        return errorList;\n      }, []);\n    }\n    return this.properties.every(_isPasswordValidFor.bind(this));\n  }\n\n  /**\n   * Rule to mandate the presence of letters in the password\n   *\n   * @param {number} [count] - minimum number of letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  letters(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'letters', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of digits in the password\n   *\n   * @param {number} [count] - minimum number of digits required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  digits(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'digits', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of symbols in the password\n   *\n   * @param {number} [count] - minimum number of symbols required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  symbols(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'symbols', arguments);\n  }\n\n  /**\n   * Rule to specify a minimum length of the password\n   *\n   * @param {number} num - minimum length\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  min(num, description) {\n    _validateLength(num);\n    return _register.call(this, 'min', arguments);\n  }\n\n  /**\n   * Rule to specify a maximum length of the password\n   *\n   * @param {number} num - maximum length\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  max(num, description) {\n    _validateLength(num);\n    return _register.call(this, 'max', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of lowercase letters in the password\n   *\n   * @param {number} [count] - minimum number of lowercase letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  lowercase(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'lowercase', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of uppercase letters in the password\n   *\n   * @param {number} [count] - minimum number of uppercase letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  uppercase(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'uppercase', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of space in the password\n   * It can be used along with 'not' to not allow spaces\n   * in the password\n   *\n   * @param {number} [count] - minimum number of spaces required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  spaces(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'spaces', arguments);\n  }\n\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'has' is also used\n   * to make the api readable and chainable\n   *\n   * @param {string|RegExp} [pattern] - pattern to match\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  has(pattern, description) {\n    return _register.call(this, 'has', arguments);\n  }\n\n  /**\n   * Rule to invert the next applied rules.\n   * All the rules applied after 'not' will have opposite effect,\n   * until 'has' rule is applied\n   *\n   * @param {string|RegExp} [pattern] - pattern to not match\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  not(pattern, description) {\n    return _register.call(this, 'not', arguments);\n  }\n\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'is' is also used\n   * to make the api readable and chainable\n   *\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  is() {\n    return _register.call(this, 'is', arguments);\n  }\n\n  /**\n   * Rule to whitelist words to be used as password\n   *\n   * @param {array} list - list of values allowed\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  oneOf(list, description) {\n    return _register.call(this, 'oneOf', arguments);\n  }\n\n  /**\n   * Insert a plugin function into the validation chain\n   *\n   * @param {Plugin} fn  - A plugin function\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  usingPlugin(fn, description) {\n    if (typeof fn !== 'function') {\n      throw new Error(error.invalidPlugin);\n    }\n    return _register.call(this, 'usingPlugin', arguments);\n  }\n}\n\nmodule.exports = PasswordValidator;\n\n/**\n * @callback Plugin\n * @param password Password injected by the library\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}