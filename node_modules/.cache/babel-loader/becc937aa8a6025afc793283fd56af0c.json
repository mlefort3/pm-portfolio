{"ast":null,"code":"/**\n * Generic method to test regex\n *\n * @private\n * @param {string} regex - regex to test\n *                           with password\n */\nvar regex = require('./constants').regex;\n\nfunction _process(regexp, repeat) {\n  if (repeat && repeat > 1) {\n    const parsedRepeat = parseInt(repeat, 10);\n    return new RegExp(regexp + '{' + parsedRepeat + ',}').test(this.password) === this.positive;\n  }\n\n  return new RegExp(regexp).test(this.password) === this.positive;\n}\n\nmodule.exports = {\n  /**\n   * Method to invert the next validations\n   *\n   * @param {RegExp} [symbol] - custom Regex which should not be present\n   */\n  not: function not(symbol) {\n    this.positive = false;\n\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not()\n   *\n   * @param {RegExp} [symbol] - custom Regex which should be present\n   */\n  has: function has(symbol) {\n    this.positive = true;\n\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not() and\n   * to make the api readable and chainable\n   *\n   */\n  is: function is() {\n    this.positive = true;\n    return true;\n  },\n\n  /**\n   * Method to specify a minimum length\n   *\n   * @param {number} num - minimum length\n   */\n  min: function min(num) {\n    return this.password.length >= num;\n  },\n\n  /**\n   * Method to specify a maximum length\n   *\n   * @param {number} num - maximum length\n   */\n  max: function max(num) {\n    return this.password.length <= num;\n  },\n\n  /**\n   * Method to validate the presence of digits\n   *\n   * @param {number} repeat - count of required digits\n   */\n  digits: function digits(repeat) {\n    return _process.call(this, regex.digits, repeat);\n  },\n\n  /**\n   * Method to validate the presence of letters\n   *\n   * @param {number} repeat - count of required letters\n   */\n  letters: function letters(repeat) {\n    return _process.call(this, regex.letters, repeat);\n  },\n\n  /**\n   * Method to validate the presence of uppercase letters\n   *\n   * @param {number} repeat - count of required uppercase letters\n   */\n  uppercase: function uppercase(repeat) {\n    if (repeat && repeat > 1) {\n      let characterIndex = 0;\n      let upperCaseLetters = 0;\n\n      while (upperCaseLetters < repeat && characterIndex < this.password.length) {\n        const currentLetter = this.password.charAt(characterIndex);\n\n        if (currentLetter !== currentLetter.toLowerCase()) {\n          upperCaseLetters++;\n        }\n\n        characterIndex++;\n      }\n\n      return upperCaseLetters === repeat === this.positive;\n    }\n\n    return this.password !== this.password.toLowerCase() === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of lowercase letters\n   *\n   * @param {number} repeat - count of required lowercase letters\n   */\n  lowercase: function lowercase(repeat) {\n    if (repeat && repeat > 1) {\n      let characterIndex = 0;\n      let lowerCaseLetters = 0;\n\n      while (lowerCaseLetters < repeat && characterIndex < this.password.length) {\n        const currentLetter = this.password.charAt(characterIndex);\n\n        if (currentLetter !== currentLetter.toUpperCase()) {\n          lowerCaseLetters++;\n        }\n\n        characterIndex++;\n      }\n\n      return lowerCaseLetters === repeat === this.positive;\n    }\n\n    return this.password !== this.password.toUpperCase() === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of symbols\n   *\n   * @param {number} repeat - count of required symbols\n   */\n  symbols: function symbols(repeat) {\n    return _process.call(this, regex.symbols, repeat);\n  },\n\n  /**\n   * Method to validate the presence of space\n   *\n   * @param {number} repeat - count of required spaces\n   */\n  spaces: function spaces(repeat) {\n    return _process.call(this, regex.spaces, repeat);\n  },\n\n  /**\n   * Method to provide pre-defined values for password\n   *\n   * @param {array} list - list of values allowed\n   */\n  oneOf: function oneOf(list) {\n    return list.indexOf(this.password) >= 0 === this.positive;\n  },\n\n  /**\n   * Method to run a plugin function for password\n   *\n   * @param {function} plugin - A plugin function\n   */\n  usingPlugin: function usingPlugin(fn) {\n    try {\n      const result = fn.call({}, this.password);\n      return Boolean(result) === this.positive;\n    } catch (err) {\n      return false;\n    }\n  }\n};","map":{"version":3,"names":["regex","require","_process","regexp","repeat","parsedRepeat","parseInt","RegExp","test","password","positive","module","exports","not","symbol","call","has","is","min","num","length","max","digits","letters","uppercase","characterIndex","upperCaseLetters","currentLetter","charAt","toLowerCase","lowercase","lowerCaseLetters","toUpperCase","symbols","spaces","oneOf","list","indexOf","usingPlugin","fn","result","Boolean","err"],"sources":["/Users/maxencelefort/Documents/GitHub/pm-portfolio/node_modules/password-validator/src/lib.js"],"sourcesContent":["/**\n * Generic method to test regex\n *\n * @private\n * @param {string} regex - regex to test\n *                           with password\n */\nvar regex = require('./constants').regex;\n\nfunction _process(regexp, repeat) {\n  if (repeat && repeat > 1) {\n    const parsedRepeat = parseInt(repeat, 10);\n    return new RegExp(regexp + '{' + parsedRepeat + ',}').test(this.password) === this.positive;\n  }\n  return new RegExp(regexp).test(this.password) === this.positive;\n}\n\nmodule.exports = {\n\n  /**\n   * Method to invert the next validations\n   *\n   * @param {RegExp} [symbol] - custom Regex which should not be present\n   */\n  not: function not(symbol) {\n    this.positive = false;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not()\n   *\n   * @param {RegExp} [symbol] - custom Regex which should be present\n   */\n  has: function has(symbol) {\n    this.positive = true;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not() and\n   * to make the api readable and chainable\n   *\n   */\n  is: function is() {\n    this.positive = true;\n    return true;\n  },\n\n  /**\n   * Method to specify a minimum length\n   *\n   * @param {number} num - minimum length\n   */\n  min: function min(num) {\n    return this.password.length >= num;\n  },\n\n  /**\n   * Method to specify a maximum length\n   *\n   * @param {number} num - maximum length\n   */\n  max: function max(num) {\n    return this.password.length <= num;\n  },\n\n  /**\n   * Method to validate the presence of digits\n   *\n   * @param {number} repeat - count of required digits\n   */\n  digits: function digits(repeat) {\n    return _process.call(this, regex.digits, repeat);\n  },\n\n  /**\n   * Method to validate the presence of letters\n   *\n   * @param {number} repeat - count of required letters\n   */\n  letters: function letters(repeat) {\n    return _process.call(this, regex.letters, repeat);\n  },\n\n  /**\n   * Method to validate the presence of uppercase letters\n   *\n   * @param {number} repeat - count of required uppercase letters\n   */\n  uppercase: function uppercase(repeat) {\n    if (repeat && repeat > 1) {\n      let characterIndex = 0;\n      let upperCaseLetters = 0;\n\n      while ((upperCaseLetters < repeat) && (characterIndex < this.password.length)) {\n        const currentLetter = this.password.charAt(characterIndex);\n        if (currentLetter !== currentLetter.toLowerCase()) {\n          upperCaseLetters++;\n        }\n        characterIndex++;\n      }\n\n      return (upperCaseLetters === repeat) === this.positive;\n    }\n    return (this.password !== this.password.toLowerCase()) === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of lowercase letters\n   *\n   * @param {number} repeat - count of required lowercase letters\n   */\n  lowercase: function lowercase(repeat) {\n    if (repeat && repeat > 1) {\n      let characterIndex = 0;\n      let lowerCaseLetters = 0;\n\n      while ((lowerCaseLetters < repeat) && (characterIndex < this.password.length)) {\n        const currentLetter = this.password.charAt(characterIndex);\n        if (currentLetter !== currentLetter.toUpperCase()) {\n          lowerCaseLetters++;\n        }\n        characterIndex++;\n      }\n\n      return (lowerCaseLetters === repeat) === this.positive;\n    }\n    return (this.password !== this.password.toUpperCase()) === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of symbols\n   *\n   * @param {number} repeat - count of required symbols\n   */\n  symbols: function symbols(repeat) {\n    return _process.call(this, regex.symbols, repeat);\n  },\n\n  /**\n   * Method to validate the presence of space\n   *\n   * @param {number} repeat - count of required spaces\n   */\n  spaces: function spaces(repeat) {\n    return _process.call(this, regex.spaces, repeat);\n  },\n\n  /**\n   * Method to provide pre-defined values for password\n   *\n   * @param {array} list - list of values allowed\n   */\n  oneOf: function oneOf(list) {\n    return list.indexOf(this.password) >= 0 === this.positive;\n  },\n\n  /**\n   * Method to run a plugin function for password\n   *\n   * @param {function} plugin - A plugin function\n   */\n  usingPlugin: function usingPlugin(fn) {\n    try {\n      const result = fn.call({}, this.password);\n      return Boolean(result) === this.positive;\n    } catch (err) {\n      return false;\n    }\n  }\n};\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,KAAnC;;AAEA,SAASE,QAAT,CAAkBC,MAAlB,EAA0BC,MAA1B,EAAkC;EAChC,IAAIA,MAAM,IAAIA,MAAM,GAAG,CAAvB,EAA0B;IACxB,MAAMC,YAAY,GAAGC,QAAQ,CAACF,MAAD,EAAS,EAAT,CAA7B;IACA,OAAO,IAAIG,MAAJ,CAAWJ,MAAM,GAAG,GAAT,GAAeE,YAAf,GAA8B,IAAzC,EAA+CG,IAA/C,CAAoD,KAAKC,QAAzD,MAAuE,KAAKC,QAAnF;EACD;;EACD,OAAO,IAAIH,MAAJ,CAAWJ,MAAX,EAAmBK,IAAnB,CAAwB,KAAKC,QAA7B,MAA2C,KAAKC,QAAvD;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;EAEf;AACF;AACA;AACA;AACA;EACEC,GAAG,EAAE,SAASA,GAAT,CAAaC,MAAb,EAAqB;IACxB,KAAKJ,QAAL,GAAgB,KAAhB;;IACA,IAAII,MAAJ,EAAY;MACV,OAAOZ,QAAQ,CAACa,IAAT,CAAc,IAAd,EAAoBD,MAApB,CAAP;IACD;;IACD,OAAO,IAAP;EACD,CAbc;;EAef;AACF;AACA;AACA;AACA;EACEE,GAAG,EAAE,SAASA,GAAT,CAAaF,MAAb,EAAqB;IACxB,KAAKJ,QAAL,GAAgB,IAAhB;;IACA,IAAII,MAAJ,EAAY;MACV,OAAOZ,QAAQ,CAACa,IAAT,CAAc,IAAd,EAAoBD,MAApB,CAAP;IACD;;IACD,OAAO,IAAP;EACD,CA1Bc;;EA4Bf;AACF;AACA;AACA;AACA;EACEG,EAAE,EAAE,SAASA,EAAT,GAAc;IAChB,KAAKP,QAAL,GAAgB,IAAhB;IACA,OAAO,IAAP;EACD,CApCc;;EAsCf;AACF;AACA;AACA;AACA;EACEQ,GAAG,EAAE,SAASA,GAAT,CAAaC,GAAb,EAAkB;IACrB,OAAO,KAAKV,QAAL,CAAcW,MAAd,IAAwBD,GAA/B;EACD,CA7Cc;;EA+Cf;AACF;AACA;AACA;AACA;EACEE,GAAG,EAAE,SAASA,GAAT,CAAaF,GAAb,EAAkB;IACrB,OAAO,KAAKV,QAAL,CAAcW,MAAd,IAAwBD,GAA/B;EACD,CAtDc;;EAwDf;AACF;AACA;AACA;AACA;EACEG,MAAM,EAAE,SAASA,MAAT,CAAgBlB,MAAhB,EAAwB;IAC9B,OAAOF,QAAQ,CAACa,IAAT,CAAc,IAAd,EAAoBf,KAAK,CAACsB,MAA1B,EAAkClB,MAAlC,CAAP;EACD,CA/Dc;;EAiEf;AACF;AACA;AACA;AACA;EACEmB,OAAO,EAAE,SAASA,OAAT,CAAiBnB,MAAjB,EAAyB;IAChC,OAAOF,QAAQ,CAACa,IAAT,CAAc,IAAd,EAAoBf,KAAK,CAACuB,OAA1B,EAAmCnB,MAAnC,CAAP;EACD,CAxEc;;EA0Ef;AACF;AACA;AACA;AACA;EACEoB,SAAS,EAAE,SAASA,SAAT,CAAmBpB,MAAnB,EAA2B;IACpC,IAAIA,MAAM,IAAIA,MAAM,GAAG,CAAvB,EAA0B;MACxB,IAAIqB,cAAc,GAAG,CAArB;MACA,IAAIC,gBAAgB,GAAG,CAAvB;;MAEA,OAAQA,gBAAgB,GAAGtB,MAApB,IAAgCqB,cAAc,GAAG,KAAKhB,QAAL,CAAcW,MAAtE,EAA+E;QAC7E,MAAMO,aAAa,GAAG,KAAKlB,QAAL,CAAcmB,MAAd,CAAqBH,cAArB,CAAtB;;QACA,IAAIE,aAAa,KAAKA,aAAa,CAACE,WAAd,EAAtB,EAAmD;UACjDH,gBAAgB;QACjB;;QACDD,cAAc;MACf;;MAED,OAAQC,gBAAgB,KAAKtB,MAAtB,KAAkC,KAAKM,QAA9C;IACD;;IACD,OAAQ,KAAKD,QAAL,KAAkB,KAAKA,QAAL,CAAcoB,WAAd,EAAnB,KAAoD,KAAKnB,QAAhE;EACD,CA/Fc;;EAiGf;AACF;AACA;AACA;AACA;EACEoB,SAAS,EAAE,SAASA,SAAT,CAAmB1B,MAAnB,EAA2B;IACpC,IAAIA,MAAM,IAAIA,MAAM,GAAG,CAAvB,EAA0B;MACxB,IAAIqB,cAAc,GAAG,CAArB;MACA,IAAIM,gBAAgB,GAAG,CAAvB;;MAEA,OAAQA,gBAAgB,GAAG3B,MAApB,IAAgCqB,cAAc,GAAG,KAAKhB,QAAL,CAAcW,MAAtE,EAA+E;QAC7E,MAAMO,aAAa,GAAG,KAAKlB,QAAL,CAAcmB,MAAd,CAAqBH,cAArB,CAAtB;;QACA,IAAIE,aAAa,KAAKA,aAAa,CAACK,WAAd,EAAtB,EAAmD;UACjDD,gBAAgB;QACjB;;QACDN,cAAc;MACf;;MAED,OAAQM,gBAAgB,KAAK3B,MAAtB,KAAkC,KAAKM,QAA9C;IACD;;IACD,OAAQ,KAAKD,QAAL,KAAkB,KAAKA,QAAL,CAAcuB,WAAd,EAAnB,KAAoD,KAAKtB,QAAhE;EACD,CAtHc;;EAwHf;AACF;AACA;AACA;AACA;EACEuB,OAAO,EAAE,SAASA,OAAT,CAAiB7B,MAAjB,EAAyB;IAChC,OAAOF,QAAQ,CAACa,IAAT,CAAc,IAAd,EAAoBf,KAAK,CAACiC,OAA1B,EAAmC7B,MAAnC,CAAP;EACD,CA/Hc;;EAiIf;AACF;AACA;AACA;AACA;EACE8B,MAAM,EAAE,SAASA,MAAT,CAAgB9B,MAAhB,EAAwB;IAC9B,OAAOF,QAAQ,CAACa,IAAT,CAAc,IAAd,EAAoBf,KAAK,CAACkC,MAA1B,EAAkC9B,MAAlC,CAAP;EACD,CAxIc;;EA0If;AACF;AACA;AACA;AACA;EACE+B,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;IAC1B,OAAOA,IAAI,CAACC,OAAL,CAAa,KAAK5B,QAAlB,KAA+B,CAA/B,KAAqC,KAAKC,QAAjD;EACD,CAjJc;;EAmJf;AACF;AACA;AACA;AACA;EACE4B,WAAW,EAAE,SAASA,WAAT,CAAqBC,EAArB,EAAyB;IACpC,IAAI;MACF,MAAMC,MAAM,GAAGD,EAAE,CAACxB,IAAH,CAAQ,EAAR,EAAY,KAAKN,QAAjB,CAAf;MACA,OAAOgC,OAAO,CAACD,MAAD,CAAP,KAAoB,KAAK9B,QAAhC;IACD,CAHD,CAGE,OAAOgC,GAAP,EAAY;MACZ,OAAO,KAAP;IACD;EACF;AA/Jc,CAAjB"},"metadata":{},"sourceType":"script"}