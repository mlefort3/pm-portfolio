{"ast":null,"code":"module.exports = function (method, arg, inverted) {\n  const msgList = inverted ? negativeMessages : positiveMessages;\n  return msgList[method] && msgList[method](arg);\n};\n\nconst positiveMessages = {\n  min: num => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  max: num => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  letters: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} letter${pluralify(num)}`;\n  },\n  digits: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} digit${pluralify(num)}`;\n  },\n  uppercase: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} uppercase letter${pluralify(num)}`;\n  },\n  lowercase: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} lowercase letter${pluralify(num)}`;\n  },\n  symbols: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} symbol${pluralify(num)}`;\n  },\n  spaces: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `The string should have a minimum of ${num} space${pluralify(num)}`;\n  },\n  oneOf: list => `The string should be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: pattern => `The string should have pattern '${pattern}'`,\n  not: pattern => `The string should not have pattern '${pattern}'`,\n  usingPlugin: fn => `The string should not violate ${fn.name || 'plugin'}`\n};\nconst negativeMessages = {\n  min: num => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  max: num => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  letters: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} letter${pluralify(num)}`;\n  },\n  digits: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} digit${pluralify(num)}`;\n  },\n  uppercase: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} uppercase letter${pluralify(num)}`;\n  },\n  lowercase: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} lowercase letter${pluralify(num)}`;\n  },\n  symbols: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} symbol${pluralify(num)}`;\n  },\n  spaces: function () {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} space${pluralify(num)}`;\n  },\n  oneOf: list => `The string should not be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: pattern => `The string should not have pattern '${pattern}'`,\n  not: pattern => `The string should have pattern '${pattern}'`,\n  usingPlugin: fn => `The string should violate ${fn.name || 'plugin'}`\n};\n\nfunction pluralify(num) {\n  return num === 1 ? '' : 's';\n}","map":{"version":3,"names":["module","exports","method","arg","inverted","msgList","negativeMessages","positiveMessages","min","num","pluralify","max","letters","digits","uppercase","lowercase","symbols","spaces","oneOf","list","length","slice","join","has","pattern","not","usingPlugin","fn","name"],"sources":["/Users/maxencelefort/Documents/GitHub/pm-portfolio/node_modules/password-validator/src/validationMessages.js"],"sourcesContent":["module.exports = function (method, arg, inverted) {\n  const msgList = inverted ? negativeMessages : positiveMessages;\n  return msgList[method] && msgList[method](arg);\n};\n\nconst positiveMessages = {\n  min: (num) => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  max: (num) => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  letters: (num = 1) => `The string should have a minimum of ${num} letter${pluralify(num)}`,\n  digits: (num = 1) => `The string should have a minimum of ${num} digit${pluralify(num)}`,\n  uppercase: (num = 1) => `The string should have a minimum of ${num} uppercase letter${pluralify(num)}`,\n  lowercase: (num = 1) => `The string should have a minimum of ${num} lowercase letter${pluralify(num)}`,\n  symbols: (num = 1) => `The string should have a minimum of ${num} symbol${pluralify(num)}`,\n  spaces: (num = 1) => `The string should have a minimum of ${num} space${pluralify(num)}`,\n  oneOf: (list) => `The string should be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: (pattern) => `The string should have pattern '${pattern}'`,\n  not: (pattern) => `The string should not have pattern '${pattern}'`,\n  usingPlugin: (fn) => `The string should not violate ${fn.name || 'plugin'}`,\n};\n\nconst negativeMessages = {\n  min: (num) => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  max: (num) => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  letters: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} letter${pluralify(num)}`,\n  digits: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} digit${pluralify(num)}`,\n  uppercase: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} uppercase letter${pluralify(num)}`,\n  lowercase: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} lowercase letter${pluralify(num)}`,\n  symbols: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} symbol${pluralify(num)}`,\n  spaces: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} space${pluralify(num)}`,\n  oneOf: (list) => `The string should not be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: (pattern) => `The string should not have pattern '${pattern}'`,\n  not: (pattern) => `The string should have pattern '${pattern}'`,\n  usingPlugin: (fn) => `The string should violate ${fn.name || 'plugin'}`,\n};\n\nfunction pluralify(num) {\n  return num === 1 ? '' : 's';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}